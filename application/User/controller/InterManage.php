<?php/** * Created by PhpStorm. * User: Baymax * Date: 2018/1/13 * Time: 20:43 */namespace app\user\controller;use think\Request;use think\Validate;use think\Session;class InterManage{    /**     * @param  uid  array     * 用户申请接口的接口     */    public function interface_submit(){        $all = Request::instance()->post();        $result = array('status' => false, 'msg' => "");        $already = array();        $success = array();        $type = array('','人脸识别','图像识别','印刷文字识别');        $inter = model('Inter');        $rule = [            'type'   => 'require',        ];        $msg = [            'type.require' => '类型是必选的',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        foreach ($all['type'] as $val){            $inter_list = $inter->where('user_id',Session::get('user_id'))->where('type',$val)->select();            if($inter_list){                array_push($already,$type[$val]);            }else{                $res = $inter->insert([                    'user_id' => Session::get('user_id'),                    'key' => RandCode(date('Y-m-d H:i:s'),'key'),                    'type' => $val,                    'status' => 1,                    'submit_time' => date('Y-m-d H:i:s'),                    'adopt_time' => '1970-01-01 00:00:00',                    'change_time' => date('Y-m-d H:i:s'),                ]);                if($res){                    array_push($success,$type[$val]);                }            }        }        //判断是否出现问题        if(sizeof($already)){            $result['status'] = 1;            $result['msg'] = '【'.implode(',',$already).'】类型接口之前已添加请不要重复添加！';            if(sizeof($success)){                $result['msg'].='【'.implode(',',$success).'】接口提交成功，等待审核';            }            return json($result);        }else{            $result['status'] = 1;            $result['msg'] = '【'.implode(',',$success).'】接口提交成功，等待审核！';            return json($result);        }    }    /**     * @param  uid  array     * 用户重置Key的接口     */    public function interface_reset(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $user = model('Inter');        $rule = [            'uid' => 'require',            'type' => 'require',        ];        $msg = [            'uid.require' => 'uid未提交',            'type.require' => '类型未提交',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $key = RandCode(date('Y-m-d H:i:s'),'key');        $reset_result = $user -> where('uid='.$all['uid']) -> setField('key',$key);            //判断重置中否出现问题            if(!$reset_result){                $result['status'] = 0;                $result['msg'] = '重置失败!';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = $key;                return json($result);            }    }}