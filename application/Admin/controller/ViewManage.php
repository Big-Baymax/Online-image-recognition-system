<?php/** * Created by PhpStorm. * User: Baymax * Date: 2017/12/21 * Time: 13:12 */namespace app\Admin\controller;use app\Common\Controller\AuthAdminController;use think\Session;use think\View;use think\Db;use think\Request;class ViewManage extends AuthAdminController{    /**     * @return View     * 渲染主页视图     */    public function admin_index()    {        $uid = Session::get('admin_id');//        if(empty($uid)){//            $this->error('还没有登录，正在跳转到登录页','login');//        }else{        $user = model('AdminUser');        $avatarurl = $user -> where('uid',$uid) -> select();        $message = model('Message');        $status_count = $message->where('view_count',0)->where('type',0)->count();        $this->assign('status_count',$status_count);        $this->assign('avatar',$avatarurl[0]['avatar']);        $this->assign('name',$avatarurl[0]['name']);            return $this->fetch('/index');//        }    }    public function admin_index_con()    {        $uid = Session::get('admin_id');        $user = model('User');        $interlog = model('InterLog');        $inter = model('Inter');        $visit = model('Visit');        $user_count = $user -> where('status','1')->count();        $active_user_count = $user -> where('status','1')->whereTime('login_time','-168 hours')->count();        $active_inter_count = $interlog ->whereTime('time','-168 hours')->group('interface_id')->having('count(interface_id)>=1')->count();        //获取在线体验        $visit_count = $visit->count();        $text = $visit->where('url','/user/interface/example/text')->count();        $qrcode = $visit ->where('url','/user/interface/example/qrcode')->count();        $color_video = $visit ->where('url','/user/interface/example/color_video')->count();        $color_pic = $visit ->where('url','/user/interface/example/color_pic')->count();        $face_video = $visit ->where('url','/user/interface/example/face_video')->count();        $face_pic = $visit ->where('url','/user/interface/example/face_pic')->count();        $fast = $visit ->where('url','/user/interface/example/fast')->count();        $fast_video = $visit ->where('url','/user/interface/example/fast_video')->count();        $example_name_arr = ['二维码识别','人脸识别（录像）','人脸识别（照片）','颜色识别（录像）','颜色识别（照片）','图片转文本','特征值提取（录像）','特征值提取（照片）'];        $example_count_arr =array();        Array_push($example_count_arr,$qrcode,$face_video,$face_pic,$color_video,$color_pic,$text,$fast_video,$fast);        //各个URL的链接访问统计柱状图        $count_visit = $visit ->field("count(*) as count,url")->group("url")->select();        $visit_url_arr = array();        $visit_url_count_arr = array();        if($count_visit){            for ($i=0;$i<count($count_visit);$i++){                $visit_url_arr[$i] = $count_visit[$i]['url'];                $visit_url_count_arr[$i] = $count_visit[$i]['count'];            }        }        //获取接口浏览的用户浏览器信息        $count_broswer = $interlog ->field("count(*) as count,broswer")->group("broswer")->select();        $broswer_arr = array();        $broswer_count_arr = array();        if($count_broswer){            for ($i=0;$i<count($count_broswer);$i++){                $broswer_arr[$i] = $count_broswer[$i]['broswer'];                $broswer_count_arr[$i]['value'] = $count_broswer[$i]['count'];                $broswer_count_arr[$i]['name'] = $count_broswer[$i]['broswer'];            }        }        //获取接口使用时候用户使用的系统信息        $count_os = $interlog ->field("count(*) as count,os")->group("os")->select();        $os_arr = array();        $os_count_arr = array();        if($count_os){            for ($i=0;$i<count($count_os);$i++){                $os_arr[$i] = $count_os[$i]['os'];                $os_count_arr[$i]['value'] = $count_os[$i]['count'];                $os_count_arr[$i]['name'] = $count_os[$i]['os'];            }        }        //return json($count_os);        //获取接口申请记录        $type = ['','人脸识别','图像识别','印刷文字识别'];        $inter_user_count = $interlog ->field("count(*) as count,type")->group("type")->select();        //return json($inter_user_count);        $inter_sum_count = $inter ->field("count(*) as count,type")->group("type")->select();        $inter_count = array();        $inter_count_sum = array();        $inter_count_use = array();        if($inter_user_count||$inter_sum_count){            for ($i=0;$i<count($inter_user_count);$i++){                $inter_count[$i] = $type[$inter_user_count[$i]['type']];                $inter_count_use[$i]= $inter_user_count[$i]['count'];                $inter_count_sum[$i] = $inter_sum_count[$i]['count'];            }        }        $this->assign([            'user_count' => $user_count,            'active_user_count' => $active_user_count,            'active_inter_count' => $active_inter_count,            'active_inter_count' => $active_inter_count,            'visit_count' => $visit_count,            'example_name_arr' => json_encode($example_name_arr),            'example_count_arr' => json_encode($example_count_arr),            'inter_count' => json_encode($inter_count),            'inter_count_sum' => json_encode($inter_count_sum),            'inter_count_use' => json_encode($inter_count_use),            'visit_url_arr' => json_encode($visit_url_arr),            'visit_url_count_arr' => json_encode($visit_url_count_arr),            'broswer_arr' => json_encode($broswer_arr),            'broswer_count_arr' => json_encode($broswer_count_arr),            'os_arr' => json_encode($os_arr),            'os_count_arr' => json_encode($os_count_arr),        ]);        return $this->fetch('/index_con');    }    /**     * @return View     * 渲染头像编辑视图     */    public function avatar_index()    {        $uid = Session::get('admin_id');        $user = model('AdminUser');        $avatarurl = $user -> where('uid',$uid) -> column('avatar');        $this->assign('avatar',$avatarurl[0]);        return $this->fetch('/form_avatar');    }    /**     * @return View     * 渲染管理员列表编辑视图     */    public function admin_manage_view()    {        return $this->fetch('administrators/admin');    }    /**     * @return View     * 渲染用户编辑视图     */    public function user_manage_view()    {        return $this->fetch('user/user');    }    /**     * @return View     * 渲染邮箱验证码视图     */    public function emailcode_view()    {        return $this->fetch('user/emailcode');    }    /**     * @return View     * 备份视图     */    public function backup_index(){        //查询数据库表列表语句        $sqlstr = "select * from INFORMATION_SCHEMA.TABLES  where TABLE_SCHEMA='irp'";        $resultstr = Db::query($sqlstr);        $this->assign('list', $resultstr);        $backup = model('Backup');        //备份列表        $backup_list = $backup->where('status',1)->order('backup_time', 'desc')->select();        $this->assign('backup_list', $backup_list);        return $this->fetch('system/backup');    }    /**     * @return View     * 渲染系统通知视图     */    public function news_index(){        $user = model('User');        $list = $user->where('status',1)->select();        $this->assign('list', $list);        return $this->fetch('system/news');    }    /**     * @return View     * 渲染设置视图     */    public function setting_index(){        $Setting = model('Setting');        $list = $Setting -> order('uid','DESC')->limit(1)->select();        $this->assign([            'title'  =>  $list[0]['title'],            'key' =>  $list[0]['key'],            'description' => $list[0]['description'],            'copyright' => $list[0]['copyright'],            'copyright_url' => $list[0]['copyright_url'],            'icp' => $list[0]['icp'],            'icp_url' => $list[0]['icp_url'],            'police' => $list[0]['police'],            'police_url' => $list[0]['police_url'],            'add_time' => $list[0]['add_time'],        ]);        return $this->fetch('system/setting');    }    /**     * @return View     * 渲染收件箱视图     * '收件箱','回信','重要','草稿','垃圾箱'     * 根据     */    public function message_receive($id){        $all = Request::instance()->get();        //每页几条记录        $page_size = 10;        $type = ['收件箱','已发送','重要','草稿','垃圾箱'];        $message = model('Message');        $total_count = $message->where('type',$id)->count();        //防止页数出现负的        if (empty($all['page'])){            $all['page']=1;        }        $list = $message->where('type',$id)->order('time', 'desc')->limit(($all['page']-1)*$page_size,$all['page']*$page_size)->select();        //计算数据        $receive_count = $message->where('type',0)->count();        $reply_count = $message->where('type',1)->count();        $important_count = $message->where('type',2)->count();        $draft_count = $message->where('type',3)->count();        $trash_count = $message->where('type',4)->count();        $this->assign([            'title'  =>  $type[$id],            'receive_count' =>  $receive_count,            'reply_count' => $reply_count,            'important_count' => $important_count,            'draft_count' => $draft_count,            'trash_count' => $trash_count,            'total' => $total_count,            'list' => $list,            'id' => $id,            'page' => $all['page'],            'page_total' => ceil($total_count/$page_size),        ]);        return $this->fetch('message/receive');    }    /**     * @return View     * 渲染回复视图     */    public function message_reply($id){        $all = Request::instance()->get();        //每页几条记录        $page_size = 10;        $type = ['收件箱','已发送','重要','草稿','垃圾箱'];        $message = model('Message');        $total_count = $message->where('type',$id)->count();        //防止页数出现负的        if (empty($all['page'])){            $all['page']=1;        }        $list = $message->where('type',$id)->order('time', 'desc')->limit(($all['page']-1)*$page_size,$all['page']*$page_size)->select();        //计算数据        $receive_count = $message->where('type',0)->count();        $reply_count = $message->where('type',1)->count();        $important_count = $message->where('type',2)->count();        $draft_count = $message->where('type',3)->count();        $trash_count = $message->where('type',4)->count();        $this->assign([            'title'  =>  $type[$id],            'receive_count' =>  $receive_count,            'reply_count' => $reply_count,            'important_count' => $important_count,            'draft_count' => $draft_count,            'trash_count' => $trash_count,            'total' => $total_count,            'list' => $list,            'id' => $id,            'page' => $all['page'],            'page_total' => ceil($total_count/$page_size)        ]);        return $this->fetch('message/reply');    }    /**     * @return View     * 渲染写信回复视图     */    public function write_message($id){        $message = model('Message');        $detail = $message->where('uid',$id)->select();        //计算数据        $receive_count = $message->where('type',0)->count();        $reply_count = $message->where('type',1)->count();        $important_count = $message->where('type',2)->count();        $draft_count = $message->where('type',3)->count();        $trash_count = $message->where('type',4)->count();        if(isset($detail[0]['type'])){            if($detail[0]['type'] == 0){                $title = '回复来信：（'.$detail[0]['title'].')';            }else{                $title = $detail[0]['title'];            }        }else{            $title='';        }        $this->assign([            'receive_count' =>  $receive_count,            'reply_count' => $reply_count,            'important_count' => $important_count,            'draft_count' => $draft_count,            'trash_count' => $trash_count,            'title' => $title,            'email' => isset($detail[0]['email'])?$detail[0]['email']:'',            'content' => isset($detail[0]['content'])?$detail[0]['content']:'',            'type' => isset($detail[0]['type'])?$detail[0]['type']:'',            'id' => $id,        ]);        return $this->fetch('message/write');    }    /**     * @return View     * 渲染写信回复视图     */    public function message_detail($id,$type){        $message = model('Message');        $message->where('uid', $id)->setInc('view_count', 1);        $detail = $message->where('uid',$id)->select();        //上一篇        $pre =$message->where('uid>"'.$id.'"')->where('type',$type)->limit('1')->select();        //下一篇        $next = $message->where('uid<"'.$id.'"')->where('type',$type)->order('uid desc')->limit('1')->select();        //出现空值的时候预防输出        if($detail[0]['img_name']){            $img = explode(',',$detail[0]['img']);            $img_name = explode(',',$detail[0]['img_name']);            $img_lenth = sizeof(explode(',',$detail[0]['img_name']));        }else{            $img = [];            $img_lenth = 0;        }        $this->assign([            'title' =>  $detail[0]['title'],            'email' => $detail[0]['email'],            'time' => $detail[0]['time'],            'content' => $detail[0]['content'],            'img' => $img,            'img_name' => $img_name,            'img_lenth' =>$img_lenth,            'uid' => $id,            'type' => $type,            'pre' => $pre,            'next' => $next,        ]);        return $this->fetch('message/detail');    }    /**     * @return View     * 渲染接口视图     */    public function interface_manage(){        $user = model('User');        $list = $user->where('status',1)->select();        $this->assign('list', $list);        return $this->fetch('interface/manage');    }    /**     * @return View     * 渲染接口使用记录视图     */    public function interface_log($id){        $this->assign('id', $id);        return $this->fetch('interface/interlog');    }    /**     * @return View     * 渲染分组管理视图     */    public function group(){        $AuthRule =model('AuthRule');        $AdminUser = model('AdminUser');        $list = $AuthRule->distinct(true)->field('parent')->select();        $rule = array();        foreach ($list as $key){            $rule [$key["parent"]] = $AuthRule->where('parent',$key["parent"])->select();        }        $list = $AdminUser->where('status',1)->select();        $this->assign('list', $list);        $this->assign([            'rule' => json_encode($rule),        ]);        //return json($rule);        return $this->fetch('administrators/group');    }    /**     * @return View     * 渲染规则管理视图     */    public function group_rule(){        return $this->fetch('administrators/group_rule');    }}