<?php/** * Created by PhpStorm. * User: Baymax * Date: 2017/12/13 * Time: 14:20 */namespace app\Admin\controller;use think\Request;use app\Admin\model\User;use think\Validate;use app\Common\Controller\AuthController;use Think\Auth;use app\Common\Controller\AuthAdminInterManage;class UserManage extends AuthAdminInterManage{    /**     * @param sortName sortOrder pageSize pageNumber     * 获取用户接口     */    public function user_list()    {        $all = Request::instance()->post();        $user = model('User');        if (isset($all['sortName'])){            $name = $all['sortName'];        }else{            $name = 'time';        }        if (isset($all['searchText'])){            $text = $all['searchText'];        }else{            $text = '';        }        //多个字段模糊查找        $where['name|email|integral']=array('like','%'.$text.'%');        //过滤字段模糊查找        $list = $user->field('pwd,login_info,update_time,key,openid',true)->where($where)->order($name, $all['sortOrder'])->paginate($all['pageSize'],false,[            'page' => $all['pageNumber'],        ]);        return json($list);    }    /**     * @param uid array     * 添加用户接口     */    public function add_user()    {        $all = Request::instance()->post();        $result   = array('status' => false, 'msg' => "");        $rule = [            'email'  => 'require|email',            'name'   => 'require',            'integral' => 'require|number'        ];        $msg = [            'name.require'  => '昵称不得为空',            'email.require' => '邮箱是必填的',            'email.email'  => '邮箱格式错误',            'integral.require'  => '积分不得为空',            'integral.number'  => '积分必须为数字',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $user = User::get(['email' => $all['email']]);        if($user){            $result['status'] = 0;            $result['msg'] = '邮箱号已注册！';            return json($result);        }        $register_time = date('Y-m-d H:i:s');        $user = User::create([            'name'  =>  $all['name'],            'email' =>  $all['email'],            'pwd' =>  authcode('198198','mysys'),            'openid' => authcode($all['email'],'irp'),            'time' => $register_time,            'integral' => $all['integral'],            'login_count' => 0,            'status' => "1",        ]);        if($user){            $result['status'] = 1;            $result['msg'] = '添加成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '添加失败！';            return json($result);        }    }    /**     * @param uid array     * 删除用户接口     */    public function del_user()    {        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $user = model('User');        if(sizeof($all['uid'])){            $msg = array();            //循环删除            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                //软删除较为麻烦                //$user->destroy($uid);                $del_result = $user -> where('uid',$uid)->delete();                if($del_result == false){                    array_push($msg,$uid);//添加元素                }            }            //判断删除中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据删除失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = '全部删除成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要删除的行！';            return json($result);        }    }    /**     * @param uid array     * 编辑用户接口     */    public function edit_user($id)    {        $all = Request::instance()->post();        $result = array('status' => false, 'msg' => "");        $user = model('User');        $rule = [            'email'  => 'require|email',            'name'   => 'require',            'integral' => 'require|number'        ];        $msg = [            'name.require'  => '昵称不得为空',            'email.require' => '邮箱是必填的',            'email.email'  => '邮箱格式错误',            'integral.require'  => '积分不得为空',            'integral.number'  => '积分必须为数字',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $edit_result = $user -> where('uid='.$id) ->update([            'name' => $all['name'],            'email' => $all['email'],            'integral' => $all['integral'],            ]);        if($edit_result){            $result['status'] = 1;            $result['msg'] = '修改成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '修改失败！';            return json($result);        }    }    /**     * @param uid array     * 重置用户密码接口，重置为198198     */    public function reset_user()    {        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        //$all['uid'] = array('7','8','9','16');        $user = model('User');        if(sizeof($all['uid'])){            $msg = array();            //循环重置            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                $reset_result = $user -> where('uid='.$uid) -> setField('pwd',authcode('198198','mysys'));                if($reset_result == false){                    array_push($msg,$uid);                }            }            //判断重置中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据操作失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = '密码重置成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要重置的行！';            return json($result);        }    }    /**     * @param  uid  array     * 禁用用户接口     */    public function defriend_user()    {        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        //$all['uid'] = array('7','8','9','16');        $user = model('User');        if(sizeof($all['uid'])){            $msg = array();            $msg_defriend = array();            $msg_undefriend = array();            //循环禁用            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                $user_status = $user -> where('uid',$uid) -> column('status');                //$user_list = find($user_list);                //$user_list为array()数组获取值操做                //判断UID是否可以获得数据列                if(!empty($user_status)){                    if($user_status[0] == 0){                        $defriend = 1;                        $defriend_result = $user -> where('uid='.$uid) -> setField('status',$defriend);                        if($defriend_result == false){                            array_push($msg,$uid);//添加元素                        }else{                            array_push($msg_undefriend,$uid);                        }                    }else{                        $defriend = 0;                        $defriend_result = $user -> where('uid='.$uid) -> setField('status',$defriend);                        if($defriend_result == false){                            array_push($msg,$uid);//添加元素                        }else{                            array_push($msg_defriend,$uid);                        }                    }                }else{                    array_push($msg,$uid);                }                //update(['status' => $defriend]);            }            //判断禁用中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据操作失败！';                return json($result);            }else{                $result['status'] = 1;                if(empty($msg_defriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_undefriend).'】解禁成功！';                }else if(empty($msg_undefriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】禁用成功！';                }else{                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】禁用成功【'.implode(',',$msg_undefriend).'】解禁成功！';                }                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要禁用的行！';            return json($result);        }    }    /**     * @param  uid  array     * 查看用户登陆记录接口     */    public function login_list($id){        $user = model('User');        $login_list = $user -> where('uid',$id) -> column('login_info');        //json_decode($login_list, true);        //$list = json_decode($login_list);        //var_dump($login_list);        //echo $login_list[0];        //$list = json_encode($login_list[0]);        //json字符串转为数组，true转为可直接引用的数组，否则不可直接引用的         $list = json_decode($login_list[0], true);         if(!empty($list)) {             //根据登陆时间排序             array_multisort(array_column($list,'login_time'),SORT_DESC,$list);         }        //var_dump($list);        //echo 'ewaeawea'.$list[0]['ip'];        return view('user/loginlist',['login_list'=>$list]);    }}