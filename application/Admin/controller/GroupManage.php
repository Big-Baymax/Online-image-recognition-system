<?php/** * Created by PhpStorm. * User: Baymax * Date: 2018/3/30 * Time: 13:59 */namespace app\Admin\controller;use app\User\model\News;use think\Request;use app\Admin\model\User;use think\Validate;use Think\Auth;use app\Common\Controller\AuthAdminInterManage;class GroupManage extends AuthAdminInterManage{    /**     * @param uid array     * 获取分组列表     */    public function Group_list()    {        $all = Request::instance()->post();        $AuthGroup = model('AuthGroup');        if (isset($all['sortName'])){            $name = $all['sortName'];        }else{            $name = 'cre_time';        }        if (isset($all['searchText'])){            $text = $all['searchText'];        }else{            $text = '';        }        //多个字段模糊查找        $where['title']=array('like','%'.$text.'%');        //过滤字段模糊查找        $list = $AuthGroup->where($where)->order($name, $all['sortOrder'])->paginate($all['pageSize'],false,[            'page' => $all['pageNumber'],        ]);        return json($list);    }    /**     * @param uid array     * 添加管理员分组     */    public function Group_add(){        $all = Request::instance()->post();        $AuthGroup = model('AuthGroup');        $result   = array('status' => false, 'msg' => "");        $rule = [            'title'  => 'require',            'rules'   => 'require'        ];        $msg = [            'title.require'  => '组名不得为空',            'rules.require' => '规则不能为空'        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $register_time = date('Y-m-d H:i:s');        $group = $AuthGroup ->insert([            'title'  =>  $all['title'],            'status' =>  1,            'rules' =>  implode(',',$all['rules']),            'cre_time' => $register_time        ]);        if($group){            $result['status'] = 1;            $result['msg'] = '添加成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '添加失败！';            return json($result);        }    }    /**     * @param uid array     * 编辑分组接口     */    public function Group_edit($id){        $all = Request::instance()->post();        $result = array('status' => false, 'msg' => "");        $AuthGroup = model('AuthGroup');        $rule = [            'title'  => 'require',            'rules'   => 'require'        ];        $msg = [            'title.require'  => '组名不得为空',            'rules.require' => '规则不能为空'        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $register_time = date('Y-m-d H:i:s');        $group = $AuthGroup ->where('id='.$id) ->update([            'title'  =>  $all['title'],            'rules' =>  implode(',',$all['rules']),        ]);        if($group){            $result['status'] = 1;            $result['msg'] = '修改成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '修改失败！';            return json($result);        }    }    /**     * @param uid array     * 删除分组接口     */    public function Group_del(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $AuthGroup = model('AuthGroup');        if(sizeof($all['uid'])){            $msg = array();            //循环删除            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                //软删除较为麻烦                //$user->destroy($uid);                $del_result = $AuthGroup-> where('id',$uid)->delete();                if($del_result == false){                    array_push($msg,$uid);//添加元素                }            }            //判断删除中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据删除失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = '全部删除成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要删除的行！';            return json($result);        }    }    /**     * @param uid array     * 禁用分组接口     */    public function Group_defriend(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $AuthGroup = model('AuthGroup');        if(sizeof($all['uid'])){            $msg = array();            $msg_defriend = array();            $msg_undefriend = array();            //循环禁用            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                $user_status = $AuthGroup -> where('id',$uid) -> column('status');                //$user_list为array()数组获取值操做                //判断UID是否可以获得数据列                if(!empty($user_status)){                    if($user_status[0] == 0){                        $defriend = 1;                        $defriend_result = $AuthGroup -> where('id='.$uid) -> setField('status',$defriend);                        if($defriend_result == false){                            array_push($msg,$uid);//添加元素                        }else{                            array_push($msg_undefriend,$uid);                        }                    }else{                        $defriend = 0;                        $defriend_result = $AuthGroup -> where('id='.$uid) -> setField('status',$defriend);                        if($defriend_result == false){                            array_push($msg,$uid);//添加元素                        }else{                            array_push($msg_defriend,$uid);                        }                    }                }else{                    array_push($msg,$uid);                }            }            //判断禁用中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据操作失败！';                return json($result);            }else{                $result['status'] = 1;                if(empty($msg_defriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_undefriend).'】解禁成功！';                }else if(empty($msg_undefriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】禁用成功！';                }else{                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】禁用成功【'.implode(',',$msg_undefriend).'】解禁成功！';                }                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要禁用的行！';            return json($result);        }    }}