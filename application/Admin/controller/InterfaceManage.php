<?php/** * Created by PhpStorm. * User: Baymax * Date: 2018/1/11 * Time: 20:09 */namespace app\Admin\controller;use think\Request;use app\Admin\model\User;use think\Validate;use app\User\model\News;use app\Common\Controller\AuthAdminInterManage;Class InterfaceManage extends AuthAdminInterManage{    /**     * @param  uid  array     * 查看用户接口信息列表接口     */    public function addnews($user_id,$title,$content){        $user_news = model('UserNews');        $res = News::create([            'title'  =>  $title,            'user_id'  =>  $user_id,            'content' =>  $content,            'time' => date('Y-m-d H:i:s'),            'view_count' => 0,            'type' => 0,        ]);        $user_news->insert([                    'news_id'=>$res->uid,                    'user_id'=>$user_id,                    'status'=>0,                ]);    }    /**     * @param  uid  array     * 查看用户接口信息列表接口     */    public function interface_list(){        $all = Request::instance()->post();        $user = model('Inter');        if (isset($all['sortName'])){            $name = $all['sortName'];        }else{            $name = 'submit_time';        }        //多个字段模糊查找        $where = [];        if($all['type'] != 0){            $where['type'] = $all['type'];        }        if($all['status'] != 0){            $where['status'] = $all['status'];        }        $starttime_day = date("Y-m-d H:i:s",mktime(0,0,0,date('m'),date('d'),date('Y')));        $endtime_day = date("Y-m-d H:i:s",mktime(0,0,0,date('m'),date('d')+1,date('Y'))-1);        $starttime_week = date("Y-m-d H:i:s",mktime(0, 0 , 0,date("m"),date("d")-date("N")+1,date("Y")));        $endtime_week = date("Y-m-d H:i:s",mktime(23,59,59,date("m"),date("d")-date("N")+7,date("Y")));        $starttime_mon = date("Y-m-d H:i:s",mktime(0, 0 , 0,date("m"),1,date("Y")));        $endtime_mon = date("Y-m-d H:i:s",mktime(23,59,59,date("m")+1 ,0,date("Y")));        $starttime_year = date("Y-m-d H:i:s",mktime(0, 0 , 0,1,1,date("Y")));        $endtime_year = date("Y-m-d H:i:s",mktime(23,59,59,12 ,31,date("Y")));        //提交时间        switch ($all['submit'])        {            case 0:$all['submit']= ['1970-1-1', '2030-10-1'];break;            case 1:$all['submit']= [$starttime_day, $endtime_day];break;            case 2:$all['submit']= [$starttime_week, $endtime_week];break;            case 3:$all['submit']= [$starttime_mon, $endtime_mon];break;            case 4:$all['submit']= [$starttime_year, $endtime_year];break;        }        //通过时间        switch ($all['adopt'])        {            case 0:$all['adopt']= ['1970-1-1', '2030-10-1'];break;            case 1:$all['adopt']= [$starttime_day, $endtime_day];break;            case 2:$all['adopt']= [$starttime_week, $endtime_week];break;            case 3:$all['adopt']= [$starttime_mon, $endtime_mon];break;            case 4:$all['adopt']= [$starttime_year, $endtime_year];break;        }        //修改时间        switch ($all['change'])        {            case 0:$all['change']= ['1970-1-1', '2030-10-1'];break;            case 1:$all['change']= [$starttime_day, $endtime_day];break;            case 2:$all['change']= [$starttime_week, $endtime_week];break;            case 3:$all['change']= [$starttime_mon, $endtime_mon];break;            case 4:$all['change']= [$starttime_year, $endtime_year];break;        }        //$where['user_id']=array('like','%'.$text.'%');        //过滤字段模糊查找//        $list = $user->whereTime('submit_time', $all['submit'])//            ->whereTime('adopt_time', $all['adopt'])//            ->whereTime('change_time', $all['change'])//            ->where($where)->order($name, $all['sortOrder'])//            ->paginate($all['pageSize'],false,[//            'page' => $all['pageNumber'],//            ]);        $list = $user->whereTime('submit_time', 'between', $all['submit'])            ->whereTime('adopt_time', 'between', $all['adopt'])            ->whereTime('change_time', 'between', $all['change'])            ->where($where)->order($name, $all['sortOrder'])            ->paginate($all['pageSize'],false,[                'page' => $all['pageNumber'],            ]);        return json($list);    }    /**     * @param  uid  array     * 删除用户接口信息接口     */    public function interface_del(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $user = model('Inter');        if(sizeof($all['uid'])){            $msg = array();            //循环删除            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                //软删除较为麻烦                //$user->destroy($uid);                $del_result = $user -> where('uid',$uid)->delete();                if($del_result == false){                    array_push($msg,$uid);//添加元素                }            }            //判断删除中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据删除失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = '全部删除成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要删除的行！';            return json($result);        }    }    /**     * @param  uid  array     * 添加用户接口信息接口     */    public function interface_add(){        $all = Request::instance()->post();        $result = array('status' => false, 'msg' => "");        $already = array();        $success = array();        $type = array('','人脸识别','图像识别','印刷文字识别');        $inter = model('Inter');        $rule = [            'user_id'  => 'require',            'type'   => 'require',        ];        $msg = [            'user_id.require'  => '用户是必选的',            'type.require' => '类型是必选的',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        foreach ($all['type'] as $val){            $inter_list = $inter->where('user_id',$all['user_id'])->where('type',$val)->select();            if($inter_list){                array_push($already,$type[$val]);            }else{                $res = $inter->insert([                    'user_id' => $all['user_id'],                    'key' => RandCode(date('Y-m-d H:i:s'),'key'),                    'type' => $val,                    'status' => 2,                    'submit_time' => date('Y-m-d H:i:s'),                    'adopt_time' => date('Y-m-d H:i:s'),                    'change_time' => date('Y-m-d H:i:s'),                ]);                if($res){                    array_push($success,$type[$val]);                    $this->addnews($all['user_id'],'接口提交管理员审核结果通知！','恭喜你！，你的【'.$type[$val].'】接口已经通过了审核<a href="_ROOT_/user/interface">前往查看</a>');                }            }        }        //判断是否出现问题        if(sizeof($already)){            $result['status'] = 1;            $result['msg'] = '【'.implode(',',$already).'】类型接口之前已添加，【'.implode(',',$success).'】成功添加！';            return json($result);        }else{            $result['status'] = 1;            $result['msg'] = '【'.implode(',',$success).'】接口成功添加！';            return json($result);        }    }    /**     * @param  uid  array     * 重置用户接口信息接口     */    public function interface_reset(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $user = model('Inter');        if(sizeof($all['uid'])){            $msg = array();            //循环重置            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                $reset_result = $user -> where('uid='.$uid) -> setField('key',RandCode(date('Y-m-d H:i:s'),'key'));                if($reset_result == false){                    array_push($msg,$uid);                }            }            //判断重置中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据操作失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = 'Key重置成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要重置的行！';            return json($result);        }    }    /**     * @param  uid  array     * 通过用户接口信息接口     */    public function interface_adopt(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $type = array('','人脸识别','图像识别','印刷文字识别');        $user = model('Inter');        if(sizeof($all['uid'])){            $msg = array();            $msg_defriend = array();            $msg_undefriend = array();            //循环禁用            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                $user_status = $user -> where('uid',$uid) -> column('status');                //判断UID是否可以获得数据列                if(!empty($user_status)){                    $detail = $user -> where('uid='.$uid) ->select();                    if($user_status[0] == 1 || $user_status[0] == 3){                        $defriend = 2;                        $defriend_result = $user -> where('uid='.$uid) -> update(['status' => $defriend,'adopt_time' => date('Y-m-d H:i:s')]);                        if($defriend_result == false){                            array_push($msg,$uid);//添加元素                        }else{                            array_push($msg_undefriend,$uid);                            $this->addnews($detail[0]['user_id'],'接口提交管理员审核结果通知！','恭喜你！，你的【'.$type[$detail[0]['type']].'】接口已经通过了审核<a href="_ROOT_/user/interface">前往查看</a>');                        }                    }else{                        $defriend = 3;                        $defriend_result = $user -> where('uid='.$uid) -> update(['status' => $defriend,'adopt_time' => date('Y-m-d H:i:s')]);                        if($defriend_result == false){                            array_push($msg,$uid);//添加元素                        }else{                            array_push($msg_defriend,$uid);                            $this->addnews($detail[0]['user_id'],'接口状态改变通知！','不好意思哦！，你的【'.$type[$detail[0]['type']].'】接口已经被禁用！');                        }                    }                }else{                    array_push($msg,$uid);                }            }            //判断禁用中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据操作失败！';                return json($result);            }else{                $result['status'] = 1;                if(empty($msg_defriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_undefriend).'】通过成功！';                }else if(empty($msg_undefriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】关闭成功！';                }else{                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】关闭成功【'.implode(',',$msg_undefriend).'】通过成功！';                }                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要审核的行！';            return json($result);        }    }    /**     * @param  uid  array     * 用户接口信息不通过     */    public function interface_no_adopt(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $type = array('','人脸识别','图像识别','印刷文字识别');        $user = model('Inter');        if(sizeof($all['uid'])){            $msg = array();            $msg_defriend = array();            $msg_undefriend = array();            //循环禁用            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                $user_status = $user -> where('uid',$uid) -> column('status');                //判断UID是否可以获得数据列                if(!empty($user_status)){                    $detail = $user -> where('uid='.$uid) ->select();                    $defriend = 3;                    $defriend_result = $user -> where('uid='.$uid) -> update(['status' => $defriend,'adopt_time' => date('Y-m-d H:i:s')]);                    if($defriend_result == false){                        array_push($msg,$uid);//添加元素                    }else{                        array_push($msg_defriend,$uid);                        $this->addnews($detail[0]['user_id'],'接口提交管理员审核结果通知！','不好意思哦！，你的【'.$type[$detail[0]['type']].'】接口审核不通过！');                    }                }else{                    array_push($msg,$uid);                }            }            //判断禁用中否出现问题            if(sizeof($msg)){                $result['status'] = 1;                $result['msg'] = 'UID为【'.implode(',',$msg).'】不通过成功！';                return json($result);            }else{                $result['status'] = 1;                if(empty($msg_defriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_undefriend).'】不通过成功！';                }else if(empty($msg_undefriend)){                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】不通过成功！';                }else{                    $result['msg'] = 'UID为【'.implode(',',$msg_defriend).'】不通过成功';                }                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要审核的行！';            return json($result);        }    }}