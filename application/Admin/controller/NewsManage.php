<?php/** * Created by PhpStorm. * User: Baymax * Date: 2018/1/6 * Time: 19:41 */namespace app\Admin\controller;use app\User\model\News;use think\Request;use app\Admin\model\User;use think\Validate;use Think\Auth;use app\Common\Controller\AuthAdminInterManage;class NewsManage extends AuthAdminInterManage{    /**     * @param sortName sortOrder pageSize pageNumber     * 获取通知信息接口     */    public function news_list()    {        $all = Request::instance()->post();        $user = model('News');        if (isset($all['sortName'])) {            $name = $all['sortName'];        } else {            $name = 'time';        }        if (isset($all['searchText'])) {            $text = $all['searchText'];        } else {            $text = '';        }        //多个字段模糊查找        $where['title|content'] = array('like', '%' . $text . '%');        //过滤字段模糊查找        $list = $user->where($where)->order($name, $all['sortOrder'])->paginate($all['pageSize'], false, [            'page' => $all['pageNumber'],        ]);        return json($list);    }    /**     * @param uid array     * 删除通知记录接口     */    public function news_del()    {        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $user = model('News');        if(sizeof($all['uid'])){            $msg = array();            //循环删除            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                //软删除较为麻烦                //$user->destroy($uid);                $del_result = $user -> where('uid',$uid)->delete();                if($del_result == false){                    array_push($msg,$uid);//添加元素                }            }            //判断删除中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据删除失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = '全部删除成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要删除的行！';            return json($result);        }    }    /**     * @param title string content string     * 添加通知记录接口     */    public function news_add()    {        $all = Request::instance()->post();        $result   = array('status' => 0, 'msg' => "");        $rule = [            'user_id' => 'require',            'title'  => 'require',            'content'   => 'require',        ];        $msg = [            'user_id.require'  => '需要先选择用户对象！',            'title.require'  => '标题不得为空！',            'content.require' => '内容不得为空！',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $news = model('News');        $user_news = model('UserNews');        $res = News::create([            'title'  =>  $all['title'],            'user_id'  =>  $all['user_id'],            'content' =>  $all['content'],            'time' => date('Y-m-d H:i:s'),            'view_count' => 0,            'type' => 1,        ]);        //return json($res->uid);        //判断选择的用户        if($all['user_id']=='0'){            $user = model('User');            $list = $user->where('status',1)->select();            foreach ($list as $val){                $user_news->insert([                    'news_id'=>$res->uid,                    'user_id'=>$val['uid'],                    'status'=>0,                ]);            }        }else{            $user_news->insert([                'news_id'=>$res->uid,                'user_id'=>$all['user_id'],                'status'=>0,            ]);        }        if($res){            $result['status'] = 1;            $result['msg'] = '添加成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '添加失败！';            return json($result);        }    }    /**     * @param uid int title string content string     * 编辑通知记录接口     */    public function news_edit($id)    {        $all = Request::instance()->post();        $result   = array('status' => false, 'msg' => "");        $rule = [            'title'  => 'require',            'content'   => 'require',        ];        $msg = [            'title.require'  => '标题不得为空！',            'content.require' => '内容不得为空！',        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $news = model('News');        $user_news = model('UserNews');        $res = $news->where('uid='.$id) ->update([            'user_id'  =>  $all['user_id'],            'title'  =>  $all['title'],            'content' =>  $all['content'],            'time' => date('Y-m-d H:i:s'),            'type' => 1,        ]);        //判断选择的用户        $user_news-> where('news_id',$id)->delete();        if($all['user_id']=='0'){            $user = model('User');            $list = $user->where('status',1)->select();            foreach ($list as $val){                $user_news->insert([                    'news_id'=>$id,                    'user_id'=>$val['uid'],                    'status'=>0,                ]);            }        }else{            $user_news->insert([                'news_id'=>$id,                'user_id'=>$all['user_id'],                'status'=>0,            ]);        }        if($res){            $result['status'] = 1;            $result['msg'] = '修改成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '修改失败！';            return json($result);        }    }}