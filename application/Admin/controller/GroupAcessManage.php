<?php/** * Created by PhpStorm. * User: Baymax * Date: 2018/4/1 * Time: 16:02 */namespace app\Admin\controller;use think\Request;use think\Validate;use app\Common\Controller\AuthAdminInterManage;class GroupAcessManage extends AuthAdminInterManage{    /**     * @param uid array     * 获取成员员接口     */    public function Access_list($id)    {        $all = Request::instance()->post();        $AuthGroupAccess = model('AuthGroupAccess');        if (isset($all['sortName'])){            $name = $all['sortName'];        }else{            $name = 'cre_time';        }        if (isset($all['searchText'])){            $text = $all['searchText'];        }else{            $text = '';        }        //多个字段模糊查找        $where['uid']=array('like','%'.$text.'%');        //过滤字段模糊查找        $list = $AuthGroupAccess->where('is_delete',0)->where('group_id',$id)->where($where)->order($name, $all['sortOrder'])->paginate($all['pageSize'],false,[            'page' => $all['pageNumber'],        ]);        return json($list);    }    /**     * @param uid array     * 添加成员接口     */    public function Access_add(){        $all = Request::instance()->post();        $AuthGroupAccess = model('AuthGroupAccess');        $result   = array('status' => false, 'msg' => "");        $rule = [            'uid'  => 'require',            'group_id'   => 'require',        ];        $msg = [            'uid.require'  => '用户为空',            'group_id.require' => '组为空'        ];        $validate = new Validate($rule, $msg);        $msg = $validate->check($all);        //匹配规则，如果有问题则返回输出信息        if(!$msg){            $result['status'] = 0;            $result['msg'] = $validate->getError();            return json($result);        }        $is_have = $AuthGroupAccess->get(            [                'group_id' => $all['group_id'],                'uid' => $all['uid'],                'is_delete' => 0            ]        );        //where('uid',$all['uid'])->where('group_id',$all['group_id'])->where('is_delete',0);       //return json($is_have);        if($is_have){            $result['status'] = 0;            $result['msg'] = '已经添加过了！';            return json($result);        }        $register_time = date('Y-m-d H:i:s');        $group = $AuthGroupAccess ->insert([            'uid'  =>  $all['uid'],            'group_id' => $all['group_id'],            'cre_time' => $register_time,            'up_time' => $register_time,            'is_delete' => 0        ]);        if($group){            $result['status'] = 1;            $result['msg'] = '添加成功！';            return json($result);        }else{            $result['status'] = 0;            $result['msg'] = '添加失败！';            return json($result);        }    }    /**     * @param uid array     * 删除成员接口     */    public function Access_del(){        $result   = array('status' => false, 'msg' => "");        $all = Request::instance()->post();        $AuthGroupAccess = model('AuthGroupAccess');        if(sizeof($all['uid'])){            $msg = array();            //循环删除            for($i = 0; $i<sizeof($all['uid']);$i++){                $uid = $all['uid'][$i];                //软删除较为麻烦                //$user->destroy($uid);                $del_result = $AuthGroupAccess-> where('id',$uid)-> setField('is_delete',1);                if($del_result == false){                    array_push($msg,$uid);//添加元素                }            }            //判断删除中否出现问题            if(sizeof($msg)){                $result['status'] = 0;                $result['msg'] = 'UID为【'.implode(',',$msg).'】的数据删除失败！';                return json($result);            }else{                $result['status'] = 1;                $result['msg'] = '全部删除成功！';                return json($result);            }        }else{            //空传判断            $result['status'] = 0;            $result['msg'] = '请先选择要删除的行！';            return json($result);        }    }}